/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IValidator {
  export type WithdrawalRequestStruct = {
    validator: PromiseOrValue<string>;
    bridge: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    sourceToken: PromiseOrValue<string>;
    sourceTokenSymbol: PromiseOrValue<string>;
    sourceTokenName: PromiseOrValue<string>;
    isSourceTokenPermit: PromiseOrValue<boolean>;
    wrappedToken: PromiseOrValue<string>;
    withdrawalTokenType: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawalRequestStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    boolean,
    string,
    number,
    BigNumber
  ] & {
    validator: string;
    bridge: string;
    from: string;
    amount: BigNumber;
    sourceToken: string;
    sourceTokenSymbol: string;
    sourceTokenName: string;
    isSourceTokenPermit: boolean;
    wrappedToken: string;
    withdrawalTokenType: number;
    nonce: BigNumber;
  };
}

export interface IValidatorInterface extends utils.Interface {
  functions: {
    "createRequest(address,address,uint256,address,string,string,bool,address,uint8)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "verify((address,address,address,uint256,address,string,string,bool,address,uint8,uint256),bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createRequest" | "getNonce" | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [IValidator.WithdrawalRequestStruct, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "Verified(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Verified"): EventFragment;
}

export interface VerifiedEventObject {
  owner: string;
  withdrawalToken: string;
  amount: BigNumber;
}
export type VerifiedEvent = TypedEvent<
  [string, string, BigNumber],
  VerifiedEventObject
>;

export type VerifiedEventFilter = TypedEventFilter<VerifiedEvent>;

export interface IValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createRequest(
      _bridge: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _sourceToken: PromiseOrValue<string>,
      _sourceTokenSymbol: PromiseOrValue<string>,
      _sourceTokenName: PromiseOrValue<string>,
      _isSourceTokenPermit: PromiseOrValue<boolean>,
      _wrappedToken: PromiseOrValue<string>,
      _withdrawalTokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IValidator.WithdrawalRequestStructOutput]>;

    getNonce(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    verify(
      _req: IValidator.WithdrawalRequestStruct,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createRequest(
    _bridge: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _sourceToken: PromiseOrValue<string>,
    _sourceTokenSymbol: PromiseOrValue<string>,
    _sourceTokenName: PromiseOrValue<string>,
    _isSourceTokenPermit: PromiseOrValue<boolean>,
    _wrappedToken: PromiseOrValue<string>,
    _withdrawalTokenType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IValidator.WithdrawalRequestStructOutput>;

  getNonce(
    _from: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verify(
    _req: IValidator.WithdrawalRequestStruct,
    _sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createRequest(
      _bridge: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _sourceToken: PromiseOrValue<string>,
      _sourceTokenSymbol: PromiseOrValue<string>,
      _sourceTokenName: PromiseOrValue<string>,
      _isSourceTokenPermit: PromiseOrValue<boolean>,
      _wrappedToken: PromiseOrValue<string>,
      _withdrawalTokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IValidator.WithdrawalRequestStructOutput>;

    getNonce(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      _req: IValidator.WithdrawalRequestStruct,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Verified(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      withdrawalToken?: PromiseOrValue<string> | null,
      amount?: null
    ): VerifiedEventFilter;
    Verified(
      owner?: PromiseOrValue<string> | null,
      withdrawalToken?: PromiseOrValue<string> | null,
      amount?: null
    ): VerifiedEventFilter;
  };

  estimateGas: {
    createRequest(
      _bridge: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _sourceToken: PromiseOrValue<string>,
      _sourceTokenSymbol: PromiseOrValue<string>,
      _sourceTokenName: PromiseOrValue<string>,
      _isSourceTokenPermit: PromiseOrValue<boolean>,
      _wrappedToken: PromiseOrValue<string>,
      _withdrawalTokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      _req: IValidator.WithdrawalRequestStruct,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRequest(
      _bridge: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _sourceToken: PromiseOrValue<string>,
      _sourceTokenSymbol: PromiseOrValue<string>,
      _sourceTokenName: PromiseOrValue<string>,
      _isSourceTokenPermit: PromiseOrValue<boolean>,
      _wrappedToken: PromiseOrValue<string>,
      _withdrawalTokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      _req: IValidator.WithdrawalRequestStruct,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
